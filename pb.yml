---
-  hosts: apic
   any_errors_fatal: true
   gather_facts: no

   vars:
     ansible_connection: local
     ansible_python_interpreter: /usr/bin/python3
     l3out_name: 'L3_Out_Device'
     epg_4: 'External_EPG'
     L3_domain: 'ISR3945'

   vars_prompt:
     - name: "apic_ip"
       prompt: "Enter APIC IP"
       default: 'sandboxapicdc.cisco.com'
       private: no

     - name: "user"
       prompt: "Enter your APIC Username"
       default: 'admin'
       unsafe: yes

     - name: "pass"
       prompt: "Enter your APIC Password"
       default: '!v3G@!4@Y'
       private: yes
       unsafe: yes

   vars_files:
     - coding_challenge_ansible.yml

   tasks:
   
   - name: Set Credentials
     set_fact:
       cred: &cred
         host: "{{ inventory_hostname }}"
         username: "{{ user }}"
         password: "{{ pass }}"
         validate_certs: false
     
   - name: Create a tenant
     tags: tenant
     aci_tenant:
       tenant: "{{ item.name }}"
       description: "{{ item.description }}"
       <<: *cred
     with_items:
       - "{{ tenants }}"


   - name: Create ap
     tags: ap
     aci_ap:
       tenant: "{{ item.0.name  }}"
       name: "{{ item.1.name }}"
       description: "{{ item.1.description }}"
       <<: *cred
     with_subelements: 
       - "{{ tenants }}"
       - "application_profiles"

   - name: create VRF
     tags: vrf
     aci_vrf:
       vrf: "{{ item.1.name }}"
       tenant: "{{ item.0.name }}"
       <<: *cred
     with_subelements: 
       - "{{ tenants }}"
       - "vrfs"

# this iterates over three dictionaires 
   - name: Create three Bridge-Domains
     tags: bd
     aci_bd:
       tenant: "{{ item.0.name }}"
       bd: "{{ item.1.name }}"
       vrf: "{{ item.1.vrf }}"
       <<: *cred  
     with_subelements: 
       - "{{ tenants }}"
       - "bridge_domains"

# maybe sub_elements cannot 

   - name: Create three Subnets
     tags: subs
     aci_bd_subnet:
       tenant: "{{ item.0.name }}"
       name: "{{ item.1.subnets.0.name }}"          # this returns three names , coz brifg_domains has three different lists called "subnets"
       bd: "{{ item.1.name }}"                      # this returns three names 
       gateway_ip: "{{ item.1.subnets.0.name }}"    # this returns three names
       subnet_mask: "{{ item.1.subnets.0.mask }}"   # this returns three names
       scope: "{{ item.1.subnets.0.scope }}"        # this returns three names
       <<: *cred 
     with_subelements: 
       - "{{ tenants }}"
       - "bridge_domains"


# epgs is subnested list, it hast epg name, bd name then contracts list inside as well. 
   
   - name: Create EPG_Web_Server
     tags: epg
     aci_epg:
       tenant: "{{ item.0.name }}"
       ap: "{{ item.1.name }}"
       epg: "{{ item.1.epgs.0.name }}" # This returns one name, application_profiles has one list called epgs thats why it won't be iterated upon, and epgs.0 must be specified
       bd: "{{ item.1.epgs.0.bd }}"    # subelements, goes two level down only to iterate over list of dicts, thats why epgs.bd will fail
       <<: *cred
     with_subelements: 
       - "{{ tenants }}"
       - "application_profiles"          # Repeated ones coz there is only ap Llist  


   - name: Create three Bridge-Domains
     tags: debug1
     debug:
       #msg: "{{ item.0.name }}"
       msg: "{{ item.1.name }}"
       #msg: "{{ item.1.vrf }}"
     with_subelements: 
       - "{{ tenants }}"
       - "bridge_domains"


# Here I can grab the subnets details such as name, mask and scope for three subnets

   - name: Create three Bridge-Domains
     tags: debug2
     debug:
       #msg: "{{ item.0.name }}"
       msg: "{{ item.1.subnets }}" # returns the content of subnets,  list of dictonaries 
       #msg: "{{ item.1.vrf }}"
     with_subelements: 
       - "{{ tenants }}"
       - "bridge_domains"



   - name: ce
     tags: debug3
     debug:
       #msg: "{{ item.0.name }}"
       msg:  "{{ item.1.subnets.name}}" # returns error, after that you need to specified with list you want .0 or .1 
       #msg: "{{ item.1.vrf }}"
     with_subelements: 
       - "{{ tenants }}"
       - "bridge_domains"


# Repeated three times, coz epgs lies under application_profiles,
# There is only ap list
   - name: Create EPG_Web_Server
     tags: debug4
     debug:
       msg: "{{ item.1.epgs.0}}"   # This returns one name, application_profiles has one list called epgs that's why it wont be iterated upon, and epgs.0 must be specified
     with_subelements:           # to iterte over dictionaries, the output has to be list of dictionaries 
       - "{{ tenants }}"
       - "application_profiles"       # Repeated ones coz there is only ap list 

# Repeated three times, coz epgs lies under application_profiles,
# There is only ap list
   - name: Create EPG_Web_Server
     tags: debug5
     debug:
       msg: "{{ item.1.epgs}}"   # This returns one name, application_profiles has one list called epgs that's why it wont be iterated upon, and epgs.0 must be specified
     with_subelements:           # to iterte over dictionaries, the output has to be list of dictionaries 
       - "{{ tenants }}"
       - "application_profiles"       # Repeated ones coz there is only ap list 



   - name: Create three Subnets
     tags: debug6
     debug:
     #aci_bd_subnet:
       #tenant: "{{ item.0.name }}"
       msg: "{{ item.1.subnets.0 }}"          # Returns three dictionaries , coz bridge_domains has three different lists called "subnets"
     with_subelements: 
       - "{{ tenants }}"
       - "bridge_domains"


   - name: Create EPG_Web_Server
     tags: debug7
     debug:
       msg: "{{ item.1.epgs}}"   
     with_subelements:            
       - "{{ tenants }}"
       - "application_profiles"
